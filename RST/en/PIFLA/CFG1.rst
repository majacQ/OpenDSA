.. This file is part of the OpenDSA eTextbook project. See
.. http://opendsa.org for more details.
.. Copyright (c) 2012-2020 by the OpenDSA Project Contributors, and
.. distributed under an MIT open source license.

.. avmetadata::
   :author: Mostafa Mohammed and Cliff Shaffer
   :satisfies:
   :topic: Context-Free Grammars and Languages

Context-Free Grammars Part 1
============================

Context-Free Languages 
----------------------

In previous chapters, we saw that some languages are regular
languages, which means that we can define a DFA, NFA, regular
expression, or regular grammar for them.
We also discussed using closure operators to show that other languages
are regular if they can be derived from known regular languages using
operators known to be closed for regular languages.
Examples of regular languages:

* keywords in a programming language
* names of identifiers
* integers
* a finite list of miscillaneous symbols such as = \\ ;

Then we discussed ways to prove that a language is non-regular, such
as using the Pumping Lemma or using operators known to be closed for
regular language to derive a known non-regular language.
Exxamples of non-regular languages include:

* :math:`\{a^ncb^n | n > 0\}`
* expressions: :math:`((a + b) - c)`
* block structures (:math:`\{\}` in Java/C++ and ``begin`` ... ``end``
  in Pascal)
* Balanced parentheses

We know that not all languages are not regular, since we've proved that
some are not.

(**Something to think about**: If you were to write a program in your
favorite programming language to recognize any of those languages,
what is the minimum memory that you need for each?)

Now we will look at a class of languages that is larger than the class
of regular languages, context-free languages.
And we will discuss ways to represent them.

.. inlineav:: CFLFS ff
   :links: AV/PIFLA/CFL/CFLFS.css
   :scripts: DataStructures/FLA/FA.js DataStructures/PIFrames.js AV/PIFLA/CFL/CFLFS.js
   :output: show


String Derivation
-----------------

.. inlineav:: CFGDerivationsFS ff
   :links: AV/PIFLA/CFL/CFGDerivationsFS.css
   :scripts: DataStructures/FLA/FA.js DataStructures/PIFrames.js AV/PIFLA/CFL/CFGDerivationsFS.js
   :output: show


Derivation Trees
----------------

.. inlineav:: DerivationTreesFS ff
   :links: AV/PIFLA/CFL/DerivationTreesFS.css
   :scripts: DataStructures/FLA/FA.js DataStructures/FLA/PDA.js DataStructures/PIFrames.js AV/PIFLA/CFL/DerivationTreesFS.js
   :output: show

Derivation Trees Example
------------------------

.. inlineav:: TreeExampleCON ss
   :links: AV/PIFLA/CFL/TreeExampleCON.css
   :scripts: lib/underscore.js DataStructures/FLA/FA.js DataStructures/FLA/PDA.js AV/PIFLA/CFL/TreeExampleCON.js
   :output: show


Practice question 1
-------------------

.. avembed:: Exercises/FLA/NumParseTreeNodes.html ka
   :long_name: Determine Number of nodes


Membership Problem
------------------

.. inlineav:: MembershipFS ff
   :links: AV/PIFLA/CFL/MembershipFS.css
   :scripts: DataStructures/FLA/FA.js DataStructures/PIFrames.js AV/PIFLA/CFL/MembershipFS.js
   :output: show


Practice question 2
-------------------

.. avembed:: Exercises/FLA/StringGenFromGmr.html ka
   :long_name: String Generated By a Grammar

